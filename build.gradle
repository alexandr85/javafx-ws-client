buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:2.3.0'
        classpath 'edu.sc.seis:macAppBundle:2.3.0'
        classpath 'org.openjfx:javafx-plugin:0.0.7'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'edu.sc.seis.macAppBundle'
apply plugin: 'edu.sc.seis.launch4j'

allprojects {
    idea {
        module {
            inheritOutputDirs = true
        }
    }
}

javafx {
    version = "12"
    modules = [ 'javafx.fxml', 'javafx.controls' ]
}

def appFileName = 'WsrInspector'
def mainClass = 'ru.testing.client.MainApp'
compileJava.options.encoding = 'UTF-8'

application {
    group = 'ru.testing'
    version = '3.0'
    description = """UI application for testing websocket & rest requests"""
    mainClassName = "$moduleName/$mainClass"
}

dependencies {
    compile 'org.glassfish.tyrus:tyrus-client:1.12'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.12'
    compile 'com.sun.jersey:jersey-client:1.19'
    compile 'com.google.code.gson:gson:2.8.5'
    compile 'com.h2database:h2:1.3.148'
    compile 'org.controlsfx:controlsfx:11.0.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'org.glassfish.tyrus.ext:tyrus-extension-deflate:1.13.1'
    compile 'log4j:log4j:1.2.17'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.4.2'
}

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
    archivesBaseName = 'test'
}


// Create mac bundle with tasks `createApp` or `createDmg`
macAppBundle {
    mainClassName = mainClass
    icon = 'src/main/resources/images/icon-512.icns'
    bundleJRE = false
    appName = appFileName
    dmgName = appFileName
}

// Create windows wrapper with task `createExe`
launch4j {
    mainClassName = mainClass
    icon = '../../application.ico'
    outfile = appFileName + '.exe'
    libraryDir = 'libs'
    outputDir = 'winApp'
}

// Create a single Jar with all dependencies
task fullJar(type: Jar) {
    jar.archiveFileName = "${appFileName}.jar"
    manifest { attributes "Implementation-Version": version, "Main-Class": mainClass }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    doLast {
        copy {
            from "build/libs/${jar.archiveFileName}"
            into "build/distributions"
        }
    }
}

// Create application distributions for all os
task create(dependsOn: [clean, createExe, createDmg, fullJar], type: Zip) {
    from 'build/winApp'
    jar.archiveFileName = "${appFileName}.zip"
    doLast {
        delete "build/libs/${appFileName}.jar"
    }
}

test {
    reports.html.enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
